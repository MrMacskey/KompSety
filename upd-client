#define _WINSOCK_DEPRECATED_NO_WARNINGS
#include <winsock2.h>
#include <string>
#include <windows.h>
#include <iostream>
#pragma comment(lib, "ws2_32.lib")
#pragma warning(disable: 4996)
using namespace std;

#define PORT 999 
#define SERVERADDR "127.0.0.1"

int main()
{
	char buff[10 * 1024];
	cout << "Use quit to exit \n";
	if (WSAStartup(0x202, (WSADATA*)&buff))
	{
		cout << "WSAStartup error: " << WSAGetLastError() << "\n";
		return -1;
	}
	SOCKET my_sock = socket(AF_INET, SOCK_DGRAM, 0);
	if (my_sock == INVALID_SOCKET)
	{
		cout << "SOCKET ERROR: " << WSAGetLastError() << '\n';
		WSACleanup();
		return -1;
	}
	sockaddr_in Daddr;
	Daddr.sin_family = AF_INET;
	Daddr.sin_port = htons(PORT);
	hostent* hst;
	if (inet_addr(SERVERADDR))
		Daddr.sin_addr.s_addr = inet_addr(SERVERADDR);
	else if (hst = gethostbyname(SERVERADDR))
		Daddr.sin_addr.s_addr = ((unsigned long**)hst->h_addr_list)[0][0];
	else
	{
		cout << "Unknown host: " << WSAGetLastError() << '\n';
		closesocket(my_sock);
		WSACleanup();
		return -1;
	}
	while (1)
	{
		cout << "S<=C: ";
		string SS;
		getline(cin, SS);
		if (SS == "quit") break;
		sendto(my_sock, (char*)&SS[0], SS.size(), 0,
			(sockaddr*)&Daddr, sizeof(Daddr));
		sockaddr_in SRaddr;
		int SRaddr_size = sizeof(SRaddr);
		int n = recvfrom(my_sock, buff, sizeof(buff), 0,
			(sockaddr*)&SRaddr, &SRaddr_size);
		if (n == SOCKET_ERROR) {
			cout << "recvfrom error: " << WSAGetLastError() << '\n';
			closesocket(my_sock);
			WSACleanup(); return -1;
		}
		buff[n] = '\0';
		cout << "S=>C: " << buff << '\n';
	}
		closesocket(my_sock);
		WSACleanup();
		return 0;
} 
